
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async greet(name: string) : Promise<string> {
    return await TAURI_INVOKE("greet", { name });
},
async login() : Promise<Result<string, ErrorMsg>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("login") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async isLoggedIn() : Promise<string | null> {
    return await TAURI_INVOKE("is_logged_in");
},
async logout() : Promise<void> {
    await TAURI_INVOKE("logout");
},
async getAccentColor() : Promise<ColorSchemeAccent | null> {
    return await TAURI_INVOKE("get_accent_color");
},
async getAllActions() : Promise<Action[]> {
    return await TAURI_INVOKE("get_all_actions");
},
async addAction(action: Action) : Promise<void> {
    await TAURI_INVOKE("add_action", { action });
},
async removeAction(trigger: string) : Promise<void> {
    await TAURI_INVOKE("remove_action", { trigger });
},
async getRandChatter() : Promise<string | null> {
    return await TAURI_INVOKE("get_rand_chatter");
},
async openLogDir() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_log_dir") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCurrentLogs() : Promise<string[]> {
    return await TAURI_INVOKE("get_current_logs");
},
async getRedeems() : Promise<Result<FrontendRedeem[], ErrorMsg>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_redeems") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async toggleDisableAction(key: string) : Promise<boolean | null> {
    return await TAURI_INVOKE("toggle_disable_action", { key });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Action = { trigger: Trigger; exec: Exec; disabled: boolean }
export type ColorSchemeAccent = { hue: number; saturation: number; luminance: number; hex_code: string }
export type ErrorMsg = "Unknown" | "TokenLoad" | "TokenSave" | "TwitchAuth" | "GetColorScheme" | "UsernameGone" | "TokenGone" | "ChatMsgSend" | "AlreadyLoggedIn" | "WebSocketSetup" | "RedeemRequest"
export type Exec = { ChatMsg: string } | { Reply: string } | { Counter: InnerCounter } | { Timeout: [ExecTarget, number] } | { Ban: ExecTarget } | { Chance: [number, Exec, Exec] }
export type ExecTarget = "None" | "User" | "Other"
export type FrontendRedeem = { id: string; color: string; name: string; cost: bigint }
export type InnerCounter = { counter: number; template: string }
export type Trigger = { Command: string } | { Redeem: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
